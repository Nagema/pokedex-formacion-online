{"version":3,"sources":["components/Pokemons.js","App.js","services/FetchAllData.js","serviceWorker.js","index.js"],"names":["Pokemons","pokemonName","msg","SpeechSynthesisUtterance","pitch","lang","window","speechSynthesis","speak","_this","this","_this$props","props","pokemons","searchPokemon","filter","pokemon","species","name","toLowerCase","includes","sort","pokemonA","pokemonB","id","map","react_default","a","createElement","className","key","onClick","handleVoice","src","sprites","front_default","alt","types","pokemonType","type","handleFilterPokemon","htmlFor","placeholder","onChange","paintData","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","FetchAllData","_this2","fetch","then","response","json","results","forEach","url","setState","concat","toConsumableArray","event","filterPokemon","currentTarget","value","_this$state","components_Pokemons","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffeaee54.chunk.js","sourcesContent":["import React from 'react';\nclass Pokemons extends React.Component {\n\n  handleVoice(pokemonName) {\n      if (pokemonName ==='pikachu') pokemonName = 'pika pika';\n      if (pokemonName ==='squirtle') pokemonName = 'squirtle squirtle';\n      const msg = new SpeechSynthesisUtterance(pokemonName);\n      msg.pitch = 10;\n      msg.lang = 'en-US';\n      window.speechSynthesis.speak(msg);\n  }\n  paintData() {\n    const { pokemons, searchPokemon} = this.props;\n    return pokemons\n      .filter((pokemon) => pokemon.species.name.toLowerCase().includes(searchPokemon.toLowerCase()))\n      .sort((pokemonA, pokemonB) => pokemonA.id - pokemonB.id)\n      .map((pokemon) => {\n        return (\n          <li className='pokemon-card' key={pokemon.id} onClick={() => this.handleVoice(pokemon.name)}>\n            <div className='wrapper-pokemon-info'>\n              <div className='wrapper-image'>\n                <div className='name-played'><i className=\"fas fa-volume-up\"></i></div>\n                <img src={pokemon.sprites.front_default} alt='pokemon' className='pokemon-image'></img>\n                <div className='id-wrapper'>\n                  <div className='pokemon-id'>ID / {pokemon.id}</div>\n                </div>\n              </div>\n              <div className='wrapper-name'>\n                <p className='pokemon-name'>{pokemon.species.name}</p>\n                <div className='tag-wrapper'>\n                  {pokemon.types.map((pokemonType) => {\n                    return (\n                      <p className='tag' key={pokemonType.type.name}>{pokemonType.type.name}</p>\n                    )\n                  })}\n                </div>\n              </div>\n            </div>\n          </li>\n        )\n      });\n  }\n  render() {\n    const { handleFilterPokemon } = this.props;\n    return (\n      <div className='main-pokemon-wrapper'>\n        <img src='./static/images/pokemon_png.png' alt='pokemon title' className='pokemon-title'></img>\n        <label htmlFor='search'>\n        </label>\n        <input type='text' placeholder=\"Filtra Pokemons por nombre...\" id='search' onChange={handleFilterPokemon}></input>\n        <ul className=\"pokemon-cards\">\n          {this.paintData()}\n        </ul>\n      </div >\n    )\n  }\n}\nexport default Pokemons;\n\n","import React from 'react';\nimport { fetchPokemonList } from './services/FetchAllData';\nimport Pokemons from './components/Pokemons'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemons: [],\n      searchPokemon: '',\n    };\n    this.handleFilterPokemon = this.handleFilterPokemon.bind(this);\n  }\n  componentDidMount() {\n    this.FetchAllData();\n  }\n  FetchAllData() {\n    fetchPokemonList()\n      .then(response => response.results)\n      .then(pokemons => {\n        pokemons.forEach(pokemon => {\n          fetch(pokemon.url)\n            .then(response => response.json())\n            .then(pokemon => {\n              this.setState({\n                pokemons: [...this.state.pokemons, pokemon],\n              })\n            })\n        })\n\n      });\n  }\n\n  handleFilterPokemon(event) {\n    const filterPokemon = event.currentTarget.value;\n    this.setState({\n      searchPokemon: filterPokemon\n    })\n  }\n  render() {\n    const { pokemons, searchPokemon } = this.state;\n    return (\n      <div className=\"App\">\n        <header>\n          <div className='head-corner top-left'></div>\n          <div className='head-corner top-right'></div>\n        </header>\n        <Pokemons\n          pokemons={pokemons}\n          searchPokemon={searchPokemon}\n          handleFilterPokemon={this.handleFilterPokemon}\n        />\n        <footer>\n          <div className='footer-corner bottom-left'></div>\n          <div className='footer-corner bottom-right'></div>\n        </footer>\n      </div>\n    )\n\n  }\n\n}\n\nexport default App;\n","const ENDPOINT = 'https://pokeapi.co/api/v2/pokemon?limit=25';\n\nconst fetchPokemonList = () => fetch(ENDPOINT).then(response => response.json());\n\nexport { fetchPokemonList };\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}